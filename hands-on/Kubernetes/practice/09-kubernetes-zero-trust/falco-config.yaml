# ไฟล์กำหนดค่า Falco สำหรับการตรวจจับภัยคุกคามแบบ runtime
# Falco จะตรวจสอบพฤติกรรมที่น่าสงสัยและกิจกรรมที่อาจเป็นอันตรายใน container
apiVersion: v1
kind: Namespace
metadata:
  name: falco
  labels:
    app: falco-system
---
# ServiceAccount สำหรับ Falco
apiVersion: v1
kind: ServiceAccount
metadata:
  name: falco
  namespace: falco
---
# ClusterRole สำหรับกำหนดสิทธิ์ให้ Falco
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: falco
rules:
  - apiGroups: [""]
    resources: ["pods", "nodes", "namespaces", "configmaps", "secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["batch"]
    resources: ["jobs", "cronjobs"]
    verbs: ["get", "list", "watch"]
---
# การผูก ClusterRole กับ ServiceAccount
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: falco
subjects:
  - kind: ServiceAccount
    name: falco
    namespace: falco
roleRef:
  kind: ClusterRole
  name: falco
  apiGroup: rbac.authorization.k8s.io
---
# ConfigMap สำหรับกำหนดค่า Falco
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-config
  namespace: falco
data:
  falco.yaml: |
    # กำหนดค่าพื้นฐาน
    file_output:
      enabled: true
      keep_alive: false
      filename: /var/log/falco/falco-events.log

    stdout_output:
      enabled: true

    # เปิดใช้งานการส่งข้อมูลไป Slack
    program_output:
      enabled: false
      program: "jq '{text: .output}' | curl -d @- -X POST https://hooks.slack.com/services/XXX/YYY/ZZZ"

    http_output:
      enabled: false
      url: http://monitoring-stack:2801

    # กำหนดรูปแบบข้อความ
    json_output: true
    json_include_output_property: true
    log_stderr: true
    log_syslog: false
    log_level: info
    priority: debug

    # ไม่เก็บเหตุการณ์ debug ในไฟล์ output
    syscall_event_drops:
      actions:
        - log
        - alert
      rate: .03333
      max_burst: 10

    # กระบวนการที่สนใจ
    watch_config_files: true

    # ตรวจสอบกิจกรรมใน container เท่านั้น (ไม่รวม host)
    container_engine:
      enabled: true
      container_runtime: docker,containerd,crio

    # ลดการแจ้งเตือนที่ไม่จำเป็น
    time_format_iso_8601: true

  falco_rules.yaml: |
    - rule: Terminal shell in container
      desc: A shell was spawned by a non-shell program in a container
      condition: container and proc.name = bash and container.image.repository != "bash"
      output: "Shell spawned in container (name=%container.name image=%container.image.repository:%container.image.tag user=%user.name command=%proc.cmdline)"
      priority: WARNING

    - rule: File below /etc opened for writing
      desc: File below /etc opened for writing (only files in /etc/hosts/ or /etc/resolv.conf should be written to)
      condition: evt.type=open and container and fd.name startswith /etc and not fd.name startswith /etc/hosts and not fd.name = /etc/resolv.conf and fd.typechar = f and evt.arg.flags contains O_WRONLY
      output: "File below /etc opened for writing (name=%fd.name container=%container.name image=%container.image.repository:%container.image.tag command=%proc.cmdline)"
      priority: WARNING

    - rule: Unexpected outbound connection destination
      desc: Detect outgoing network connections to destinations not in allowed list
      condition: outbound and not user.name=root and container and not (fd.sip="127.0.0.1" or fd.sip="::1") and not fd.sport=53
      output: "Unexpected outbound connection destination (command=%proc.cmdline connection=%fd.name container=%container.name image=%container.image.repository:%container.image.tag)"
      priority: WARNING

    - rule: Package management process in container
      desc: Detect package management tools being used in containers
      condition: container and (proc.name = apt or proc.name = apt-get or proc.name = yum or proc.name = dnf or proc.name = apk)
      output: "Package management process launched in container (command=%proc.cmdline container=%container.name image=%container.image.repository:%container.image.tag)"
      priority: WARNING

    - rule: Attempt to access credentials
      desc: Detect attempts to access credential files
      condition: evt.type=open and fd.name pmatch (*/etc/shadow* or */etc/passwd* or */etc/sudoers*) and container and evt.dir=<
      output: "Credential access attempt (name=%fd.name command=%proc.cmdline container=%container.name image=%container.image.repository:%container.image.tag)"
      priority: WARNING

    - rule: Secret mounted in container
      desc: Detect access to Kubernetes secret or config map mounted in container
      condition: container and openat and fd.name startswith /var/run/secrets
      output: "Secret accessed in container (name=%fd.name container=%container.name image=%container.image.repository:%container.image.tag user=%user.name command=%proc.cmdline)"
      priority: WARNING

    - rule: Mount namespace change
      desc: Detect changes to mount namespaces which could indicate an attempt to escape container
      condition: evt.type=setns and evt.arg.flags contains CLONE_NEWNS
      output: "Mount namespace change detected (command=%proc.cmdline container=%container.name image=%container.image.repository:%container.image.tag)"
      priority: WARNING
---
# DaemonSet สำหรับรัน Falco ในทุก Node
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: falco
  namespace: falco
  labels:
    app: falco
spec:
  selector:
    matchLabels:
      app: falco
  template:
    metadata:
      labels:
        app: falco
    spec:
      serviceAccountName: falco
      hostPID: true
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: falco
        image: falcosecurity/falco:0.32.0
        resources:
          limits:
            cpu: 1000m
            memory: 1024Mi
          requests:
            cpu: 100m
            memory: 256Mi
        securityContext:
          privileged: true
        env:
        - name: FALCO_GRPC_ENABLED
          value: "true"
        - name: FALCO_JSON_OUTPUT
          value: "true"
        - name: FALCO_PRIORITY
          value: "debug"
        volumeMounts:
        - mountPath: /var/run/docker.sock
          name: docker-socket
          readOnly: true
        - mountPath: /host/dev
          name: dev-fs
          readOnly: true
        - mountPath: /host/proc
          name: proc-fs
          readOnly: true
        - mountPath: /host/etc
          name: etc-fs
          readOnly: true
        - mountPath: /host/boot
          name: boot-fs
          readOnly: true
        - mountPath: /host/lib/modules
          name: lib-modules
          readOnly: true
        - mountPath: /host/usr
          name: usr-fs
          readOnly: true
        - mountPath: /host/var/run/kubernetes
          name: k8s-run
        - mountPath: /etc/falco
          name: config-volume
      volumes:
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
      - name: dev-fs
        hostPath:
          path: /dev
      - name: proc-fs
        hostPath:
          path: /proc
      - name: etc-fs
        hostPath:
          path: /etc
      - name: boot-fs
        hostPath:
          path: /boot
      - name: lib-modules
        hostPath:
          path: /lib/modules
      - name: usr-fs
        hostPath:
          path: /usr
      - name: k8s-run
        hostPath:
          path: /var/run/kubernetes
      - name: config-volume
        configMap:
          name: falco-config
          items:
            - key: falco.yaml
              path: falco.yaml
            - key: falco_rules.yaml
              path: rules.d/falco_rules.yaml
