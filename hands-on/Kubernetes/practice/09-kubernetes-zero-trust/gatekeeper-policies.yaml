# ไฟล์กำหนดนโยบาย OPA Gatekeeper สำหรับการบังคับใช้นโยบายความปลอดภัย

# 1. ConstraintTemplate สำหรับการตรวจสอบ SecurityContext
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredsecuritycontext
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredSecurityContext
      validation:
        # openAPIV3Schema สำหรับพารามิเตอร์ที่ใช้กับนโยบายนี้
        openAPIV3Schema:
          type: object
          properties:
            privileged:
              type: boolean
            allowPrivilegeEscalation:
              type: boolean
            requiredDropCapabilities:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredsecuritycontext

        # ตรวจสอบการมีอยู่ของ securityContext
        violation[{"msg": msg}] {
          c := input.review.object.spec.containers[_]
          not c.securityContext
          msg := sprintf("Container %v does not have securityContext", [c.name])
        }

        # ตรวจสอบการตั้งค่า privileged
        violation[{"msg": msg}] {
          input.parameters.privileged == false
          c := input.review.object.spec.containers[_]
          c.securityContext.privileged
          msg := sprintf("Container %v must not set securityContext.privileged to true", [c.name])
        }

        # ตรวจสอบการตั้งค่า allowPrivilegeEscalation
        violation[{"msg": msg}] {
          input.parameters.allowPrivilegeEscalation == false
          c := input.review.object.spec.containers[_]
          c.securityContext.allowPrivilegeEscalation
          msg := sprintf("Container %v must not set securityContext.allowPrivilegeEscalation to true", [c.name])
        }
---
# 2. ข้อจำกัดสำหรับการบังคับใช้ SecurityContext
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredSecurityContext
metadata:
  name: require-security-context
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
  parameters:
    privileged: false
    allowPrivilegeEscalation: false
    requiredDropCapabilities: ["ALL"]
---
# 3. ConstraintTemplate สำหรับการบังคับให้ใช้ ReadOnly root filesystem
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sreadonlyrootfilesystem
spec:
  crd:
    spec:
      names:
        kind: K8sReadOnlyRootFilesystem
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sreadonlyrootfilesystem

        violation[{"msg": msg}] {
          c := input.review.object.spec.containers[_]
          not c.securityContext.readOnlyRootFilesystem
          msg := sprintf("Container %v must set securityContext.readOnlyRootFilesystem to true", [c.name])
        }
---
# 4. ข้อจำกัดสำหรับการบังคับใช้ ReadOnly root filesystem
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sReadOnlyRootFilesystem
metadata:
  name: require-ro-rootfs
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    excludedNamespaces: ["kube-system", "istio-system"]
---
# 5. ConstraintTemplate สำหรับการบังคับใช้ Network Policy
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequirednetworkpolicy
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredNetworkPolicy
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequirednetworkpolicy

        violation[{"msg": msg}] {
          input.review.kind.kind == "Namespace"
          namespace := input.review.object.metadata.name
          not data.inventory.cluster.NetworkPolicy[namespaceNetworkPolicy(namespace)]
          msg := sprintf("Namespace %v does not have a NetworkPolicy", [namespace])
        }

        namespaceNetworkPolicy(namespace) = policy {
          policy := concat("/", [
            "NetworkPolicy",
            namespace,
            _,
          ])
        }
