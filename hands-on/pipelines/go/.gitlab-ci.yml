image: golang:1.21-alpine

stages:
  - test
  - build
  - deploy

variables:
  GO_PROJECT_DIR: $CI_PROJECT_DIR
  CGO_ENABLED: 0

before_script:
  - apk add --no-cache git
  - go mod download

test:
  stage: test
  script:
    - go test ./... -cover
    - go vet ./...

lint:
  stage: test
  image: golangci/golangci-lint:latest
  script:
    - golangci-lint run ./...

build:
  stage: build
  script:
    - go build -o go-app ./cmd/server
  artifacts:
    paths:
      - go-app
    expire_in: 1 week

docker-build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

deploy-dev:
  stage: deploy
  image: alpine:latest
  script:
    - apk add --no-cache curl
    - curl -X POST -F token=$DEPLOY_TOKEN -F ref=main https://gitlab.example.com/api/v4/projects/$CI_PROJECT_ID/trigger/pipeline
  environment:
    name: development
    url: http://dev-server:8080
  only:
    - dev

deploy-staging:
  stage: deploy
  image: alpine:latest
  script:
    - apk add --no-cache curl
    - curl -X POST -F token=$DEPLOY_TOKEN -F ref=main https://gitlab.example.com/api/v4/projects/$CI_PROJECT_ID/trigger/pipeline
  environment:
    name: staging
    url: http://staging-server:8080
  only:
    - staging

deploy-production:
  stage: deploy
  image: alpine:latest
  script:
    - apk add --no-cache curl
    - curl -X POST -F token=$DEPLOY_TOKEN -F ref=main https://gitlab.example.com/api/v4/projects/$CI_PROJECT_ID/trigger/pipeline
  environment:
    name: production
    url: http://production-server:8080
  when: manual
  only:
    - main
